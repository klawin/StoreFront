@*@model IEnumerable<StoreFront.UI.MVC.Models.CartItemViewModel>*@
@model Dictionary<int, StoreFront.UI.MVC.Models.CartItemViewModel>
@{
    ViewBag.Title = "Shopping Cart";
    //Add local variables for calculations on the page
    decimal? cartTotal = 0;
    int totalCountOfItems = 0;
}

<div class="container">
    <section class="py-5 bg-light">
        <div class="container">
            <div class="row px-4 px-lg-5 py-lg-4 align-items-center">
                <div class="col-lg-6">
                    <h1 class="h2 text-uppercase mb-0">@ViewBag.Title</h1>
                </div>
                <div class="col-lg-6 text-lg-end">
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb justify-content-lg-end mb-0 px-0 bg-light">
                            <li class="breadcrumb-item"><a class="text-dark" href="@Url.Action("Index", "Home")">Home</a></li>
                            <li class="breadcrumb-item active" aria-current="page">@ViewBag.Title</li>
                        </ol>
                    </nav>
                </div>
            </div>
        </div>
    </section>

    <br />

    <p class="text-right">
        @Html.ActionLink("Back to shopping", "Index", "Products", null, new { @class = "btn btn-dark" })
    </p>

    @*<p>
            @Html.ActionLink("Create New", "Create")
        </p>*@

    @if (Model.Count == 0)
    {
        <p class="alert alert-warning">
            @ViewBag.Message
        </p>
    }
    else
    {

        <table class="table">
            <tr>
                <th>Product Image</th>
                <th>Product</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Total</th>
                <th></th>
            </tr>

            @foreach (var item in Model)
            {
                //When calling on an item in a Dictionary, you have to specify the KEY or VALUE
                <tr>
                    <td>
                        <a href="@Url.Action("Details","Products", new { id = item.Value.Product.ProductID })"><img src="~/Content/img/products/@item.Value.Product.ProductImage" style="max-height: 150px;" title="@item.Value.Product.ProductName"/></a> 
                    </td>
                    <td>
                        <br />
                        <a href="@Url.Action("Details","Products", new { id = item.Value.Product.ProductID })">@item.Value.Product.ProductName</a>
                        
                    </td>
                    <td>
                        <br />
                        @*
                            Version 1: Just show the quantity
                            @Html.DisplayFor(modelItem => item.Value.Qty)*@

                        @* Version 2: Provide a space for them to see the Qty and update it *@
                        @using (Html.BeginForm("UpdateCart", "ShoppingCart", FormMethod.Post))
                        {
                            @Html.Hidden("productID", item.Key)
                            @Html.TextBox("qty", item.Value.Qty, new { @class = "form-control", @style = "Max-width: 50px; display: inline;" })//Defaults to show the current qty to user in the textbox
                            <input type="submit" value="Update Quantity" class="btn btn-dark" />
                        }

                        @{
                            //Calculate the running total number of items in the cart
                            totalCountOfItems += item.Value.Qty;
                        }
                    </td>
                    <td>
                        <br />
                        @string.Format($"{item.Value.Product.Price:c}")
                    </td>
                    <td>
                        <br />
                        @* Calculate the line total and update the running total variable for each row.  *@
                        @{
                            decimal? lineTotal = item.Value.Product.Price * item.Value.Qty;
                            cartTotal += lineTotal;
                        }

                        @string.Format($"{lineTotal:c}")
                    </td>
                    <td>
                        <br />
                        @*@Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) |
                            @Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) |
                            @Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })*@

                        @* Remove from cart button *@
                        @Html.ActionLink("Remove from cart", "RemoveFromCart", new { id = item.Key })
                    </td>
                </tr>
                            }

        </table>
        <br />
        <p class="alert alert-success text-center" style="font-size: 1.25em;">
            You have @totalCountOfItems item@(totalCountOfItems == 1 ? "" : "s") in your cart.
            Your subtotal is @string.Format($"{cartTotal:c}").
        </p>
        <br />
                            }


</div>
    @{ViewBag.TotalItems = "(" + totalCountOfItems + ")";}
@*<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Qty)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Qty)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) |
                @Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) |
                @Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })
            </td>
        </tr>
    }

</table>*@
